// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Game {

namespace {

const ::google::protobuf::Descriptor* Tile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_reflection_ = NULL;
const ::google::protobuf::Descriptor* TileStack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileStack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_2eproto() {
  protobuf_AddDesc_game_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game.proto");
  GOOGLE_CHECK(file != NULL);
  Tile_descriptor_ = file->message_type(0);
  static const int Tile_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, foreground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, wall1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, wall2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, wall3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, wall4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, wall5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, wall6_),
  };
  Tile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_descriptor_,
      Tile::default_instance_,
      Tile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile));
  TileStack_descriptor_ = file->message_type(1);
  static const int TileStack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStack, tiles_),
  };
  TileStack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TileStack_descriptor_,
      TileStack::default_instance_,
      TileStack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TileStack));
  Map_descriptor_ = file->message_type(2);
  static const int Map_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, tile_stacks_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_descriptor_, &Tile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TileStack_descriptor_, &TileStack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_2eproto() {
  delete Tile::default_instance_;
  delete Tile_reflection_;
  delete TileStack::default_instance_;
  delete TileStack_reflection_;
  delete Map::default_instance_;
  delete Map_reflection_;
}

void protobuf_AddDesc_game_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngame.proto\022\004Game\"\227\001\n\004Tile\022\r\n\005floor\030\001 \002"
    "(\r\022\022\n\nbackground\030\002 \002(\r\022\022\n\nforeground\030\003 \002"
    "(\r\022\r\n\005wall1\030\004 \002(\r\022\r\n\005wall2\030\005 \002(\r\022\r\n\005wall"
    "3\030\006 \002(\r\022\r\n\005wall4\030\007 \002(\r\022\r\n\005wall5\030\010 \002(\r\022\r\n"
    "\005wall6\030\t \002(\r\"&\n\tTileStack\022\031\n\005tiles\030\001 \003(\013"
    "2\n.Game.Tile\"J\n\003Map\022\r\n\005width\030\001 \002(\r\022\016\n\006he"
    "ight\030\002 \002(\r\022$\n\013tile_stacks\030\003 \003(\0132\017.Game.T"
    "ileStack", 288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  Tile::default_instance_ = new Tile();
  TileStack::default_instance_ = new TileStack();
  Map::default_instance_ = new Map();
  Tile::default_instance_->InitAsDefaultInstance();
  TileStack::default_instance_->InitAsDefaultInstance();
  Map::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_2eproto {
  StaticDescriptorInitializer_game_2eproto() {
    protobuf_AddDesc_game_2eproto();
  }
} static_descriptor_initializer_game_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Tile::kFloorFieldNumber;
const int Tile::kBackgroundFieldNumber;
const int Tile::kForegroundFieldNumber;
const int Tile::kWall1FieldNumber;
const int Tile::kWall2FieldNumber;
const int Tile::kWall3FieldNumber;
const int Tile::kWall4FieldNumber;
const int Tile::kWall5FieldNumber;
const int Tile::kWall6FieldNumber;
#endif  // !_MSC_VER

Tile::Tile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tile::InitAsDefaultInstance() {
}

Tile::Tile(const Tile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tile::SharedCtor() {
  _cached_size_ = 0;
  floor_ = 0u;
  background_ = 0u;
  foreground_ = 0u;
  wall1_ = 0u;
  wall2_ = 0u;
  wall3_ = 0u;
  wall4_ = 0u;
  wall5_ = 0u;
  wall6_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile::~Tile() {
  SharedDtor();
}

void Tile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_descriptor_;
}

const Tile& Tile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Tile* Tile::default_instance_ = NULL;

Tile* Tile::New() const {
  return new Tile;
}

void Tile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    floor_ = 0u;
    background_ = 0u;
    foreground_ = 0u;
    wall1_ = 0u;
    wall2_ = 0u;
    wall3_ = 0u;
    wall4_ = 0u;
    wall5_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wall6_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 floor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_background;
        break;
      }

      // required uint32 background = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_)));
          set_has_background();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_foreground;
        break;
      }

      // required uint32 foreground = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_foreground:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foreground_)));
          set_has_foreground();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wall1;
        break;
      }

      // required uint32 wall1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wall1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wall1_)));
          set_has_wall1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wall2;
        break;
      }

      // required uint32 wall2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wall2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wall2_)));
          set_has_wall2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wall3;
        break;
      }

      // required uint32 wall3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wall3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wall3_)));
          set_has_wall3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_wall4;
        break;
      }

      // required uint32 wall4 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wall4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wall4_)));
          set_has_wall4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_wall5;
        break;
      }

      // required uint32 wall5 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wall5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wall5_)));
          set_has_wall5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wall6;
        break;
      }

      // required uint32 wall6 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wall6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wall6_)));
          set_has_wall6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 floor = 1;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->floor(), output);
  }

  // required uint32 background = 2;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->background(), output);
  }

  // required uint32 foreground = 3;
  if (has_foreground()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->foreground(), output);
  }

  // required uint32 wall1 = 4;
  if (has_wall1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wall1(), output);
  }

  // required uint32 wall2 = 5;
  if (has_wall2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wall2(), output);
  }

  // required uint32 wall3 = 6;
  if (has_wall3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wall3(), output);
  }

  // required uint32 wall4 = 7;
  if (has_wall4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wall4(), output);
  }

  // required uint32 wall5 = 8;
  if (has_wall5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->wall5(), output);
  }

  // required uint32 wall6 = 9;
  if (has_wall6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wall6(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 floor = 1;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->floor(), target);
  }

  // required uint32 background = 2;
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->background(), target);
  }

  // required uint32 foreground = 3;
  if (has_foreground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->foreground(), target);
  }

  // required uint32 wall1 = 4;
  if (has_wall1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wall1(), target);
  }

  // required uint32 wall2 = 5;
  if (has_wall2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wall2(), target);
  }

  // required uint32 wall3 = 6;
  if (has_wall3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wall3(), target);
  }

  // required uint32 wall4 = 7;
  if (has_wall4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->wall4(), target);
  }

  // required uint32 wall5 = 8;
  if (has_wall5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->wall5(), target);
  }

  // required uint32 wall6 = 9;
  if (has_wall6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wall6(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 floor = 1;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floor());
    }

    // required uint32 background = 2;
    if (has_background()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background());
    }

    // required uint32 foreground = 3;
    if (has_foreground()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foreground());
    }

    // required uint32 wall1 = 4;
    if (has_wall1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wall1());
    }

    // required uint32 wall2 = 5;
    if (has_wall2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wall2());
    }

    // required uint32 wall3 = 6;
    if (has_wall3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wall3());
    }

    // required uint32 wall4 = 7;
    if (has_wall4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wall4());
    }

    // required uint32 wall5 = 8;
    if (has_wall5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wall5());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 wall6 = 9;
    if (has_wall6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wall6());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_background()) {
      set_background(from.background());
    }
    if (from.has_foreground()) {
      set_foreground(from.foreground());
    }
    if (from.has_wall1()) {
      set_wall1(from.wall1());
    }
    if (from.has_wall2()) {
      set_wall2(from.wall2());
    }
    if (from.has_wall3()) {
      set_wall3(from.wall3());
    }
    if (from.has_wall4()) {
      set_wall4(from.wall4());
    }
    if (from.has_wall5()) {
      set_wall5(from.wall5());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wall6()) {
      set_wall6(from.wall6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void Tile::Swap(Tile* other) {
  if (other != this) {
    std::swap(floor_, other->floor_);
    std::swap(background_, other->background_);
    std::swap(foreground_, other->foreground_);
    std::swap(wall1_, other->wall1_);
    std::swap(wall2_, other->wall2_);
    std::swap(wall3_, other->wall3_);
    std::swap(wall4_, other->wall4_);
    std::swap(wall5_, other->wall5_);
    std::swap(wall6_, other->wall6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_descriptor_;
  metadata.reflection = Tile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TileStack::kTilesFieldNumber;
#endif  // !_MSC_VER

TileStack::TileStack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TileStack::InitAsDefaultInstance() {
}

TileStack::TileStack(const TileStack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TileStack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileStack::~TileStack() {
  SharedDtor();
}

void TileStack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TileStack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileStack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileStack_descriptor_;
}

const TileStack& TileStack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

TileStack* TileStack::default_instance_ = NULL;

TileStack* TileStack::New() const {
  return new TileStack;
}

void TileStack::Clear() {
  tiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TileStack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game.Tile tiles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TileStack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game.Tile tiles = 1;
  for (int i = 0; i < this->tiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tiles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TileStack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game.Tile tiles = 1;
  for (int i = 0; i < this->tiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tiles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TileStack::ByteSize() const {
  int total_size = 0;

  // repeated .Game.Tile tiles = 1;
  total_size += 1 * this->tiles_size();
  for (int i = 0; i < this->tiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tiles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileStack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TileStack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TileStack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileStack::MergeFrom(const TileStack& from) {
  GOOGLE_CHECK_NE(&from, this);
  tiles_.MergeFrom(from.tiles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TileStack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileStack::CopyFrom(const TileStack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileStack::IsInitialized() const {

  for (int i = 0; i < tiles_size(); i++) {
    if (!this->tiles(i).IsInitialized()) return false;
  }
  return true;
}

void TileStack::Swap(TileStack* other) {
  if (other != this) {
    tiles_.Swap(&other->tiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TileStack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileStack_descriptor_;
  metadata.reflection = TileStack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map::kWidthFieldNumber;
const int Map::kHeightFieldNumber;
const int Map::kTileStacksFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map::InitAsDefaultInstance() {
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
  }
  tile_stacks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tile_stacks;
        break;
      }

      // repeated .Game.TileStack tile_stacks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tile_stacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_stacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tile_stacks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // repeated .Game.TileStack tile_stacks = 3;
  for (int i = 0; i < this->tile_stacks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tile_stacks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // repeated .Game.TileStack tile_stacks = 3;
  for (int i = 0; i < this->tile_stacks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tile_stacks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  // repeated .Game.TileStack tile_stacks = 3;
  total_size += 1 * this->tile_stacks_size();
  for (int i = 0; i < this->tile_stacks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_stacks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_stacks_.MergeFrom(from.tile_stacks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < tile_stacks_size(); i++) {
    if (!this->tile_stacks(i).IsInitialized()) return false;
  }
  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    tile_stacks_.Swap(&other->tile_stacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game

// @@protoc_insertion_point(global_scope)
