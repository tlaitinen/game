// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef PROTOBUF_game_2eproto__INCLUDED
#define PROTOBUF_game_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_2eproto();
void protobuf_AssignDesc_game_2eproto();
void protobuf_ShutdownFile_game_2eproto();

class Tile;
class TileStack;
class Map;

// ===================================================================

class Tile : public ::google::protobuf::Message {
 public:
  Tile();
  virtual ~Tile();

  Tile(const Tile& from);

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile& default_instance();

  void Swap(Tile* other);

  // implements Message ----------------------------------------------

  Tile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 floor = 1;
  inline bool has_floor() const;
  inline void clear_floor();
  static const int kFloorFieldNumber = 1;
  inline ::google::protobuf::uint32 floor() const;
  inline void set_floor(::google::protobuf::uint32 value);

  // optional uint32 background = 2;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 2;
  inline ::google::protobuf::uint32 background() const;
  inline void set_background(::google::protobuf::uint32 value);

  // optional uint32 foreground = 3;
  inline bool has_foreground() const;
  inline void clear_foreground();
  static const int kForegroundFieldNumber = 3;
  inline ::google::protobuf::uint32 foreground() const;
  inline void set_foreground(::google::protobuf::uint32 value);

  // optional uint32 wall1 = 4;
  inline bool has_wall1() const;
  inline void clear_wall1();
  static const int kWall1FieldNumber = 4;
  inline ::google::protobuf::uint32 wall1() const;
  inline void set_wall1(::google::protobuf::uint32 value);

  // optional uint32 wall2 = 5;
  inline bool has_wall2() const;
  inline void clear_wall2();
  static const int kWall2FieldNumber = 5;
  inline ::google::protobuf::uint32 wall2() const;
  inline void set_wall2(::google::protobuf::uint32 value);

  // optional uint32 wall3 = 6;
  inline bool has_wall3() const;
  inline void clear_wall3();
  static const int kWall3FieldNumber = 6;
  inline ::google::protobuf::uint32 wall3() const;
  inline void set_wall3(::google::protobuf::uint32 value);

  // optional uint32 wall4 = 7;
  inline bool has_wall4() const;
  inline void clear_wall4();
  static const int kWall4FieldNumber = 7;
  inline ::google::protobuf::uint32 wall4() const;
  inline void set_wall4(::google::protobuf::uint32 value);

  // optional uint32 wall5 = 8;
  inline bool has_wall5() const;
  inline void clear_wall5();
  static const int kWall5FieldNumber = 8;
  inline ::google::protobuf::uint32 wall5() const;
  inline void set_wall5(::google::protobuf::uint32 value);

  // optional uint32 wall6 = 9;
  inline bool has_wall6() const;
  inline void clear_wall6();
  static const int kWall6FieldNumber = 9;
  inline ::google::protobuf::uint32 wall6() const;
  inline void set_wall6(::google::protobuf::uint32 value);

  // optional int32 offset1 = 10;
  inline bool has_offset1() const;
  inline void clear_offset1();
  static const int kOffset1FieldNumber = 10;
  inline ::google::protobuf::int32 offset1() const;
  inline void set_offset1(::google::protobuf::int32 value);

  // optional int32 offset2 = 11;
  inline bool has_offset2() const;
  inline void clear_offset2();
  static const int kOffset2FieldNumber = 11;
  inline ::google::protobuf::int32 offset2() const;
  inline void set_offset2(::google::protobuf::int32 value);

  // optional int32 offset3 = 12;
  inline bool has_offset3() const;
  inline void clear_offset3();
  static const int kOffset3FieldNumber = 12;
  inline ::google::protobuf::int32 offset3() const;
  inline void set_offset3(::google::protobuf::int32 value);

  // optional int32 offset4 = 13;
  inline bool has_offset4() const;
  inline void clear_offset4();
  static const int kOffset4FieldNumber = 13;
  inline ::google::protobuf::int32 offset4() const;
  inline void set_offset4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Game.Tile)
 private:
  inline void set_has_floor();
  inline void clear_has_floor();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_foreground();
  inline void clear_has_foreground();
  inline void set_has_wall1();
  inline void clear_has_wall1();
  inline void set_has_wall2();
  inline void clear_has_wall2();
  inline void set_has_wall3();
  inline void clear_has_wall3();
  inline void set_has_wall4();
  inline void clear_has_wall4();
  inline void set_has_wall5();
  inline void clear_has_wall5();
  inline void set_has_wall6();
  inline void clear_has_wall6();
  inline void set_has_offset1();
  inline void clear_has_offset1();
  inline void set_has_offset2();
  inline void clear_has_offset2();
  inline void set_has_offset3();
  inline void clear_has_offset3();
  inline void set_has_offset4();
  inline void clear_has_offset4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 floor_;
  ::google::protobuf::uint32 background_;
  ::google::protobuf::uint32 foreground_;
  ::google::protobuf::uint32 wall1_;
  ::google::protobuf::uint32 wall2_;
  ::google::protobuf::uint32 wall3_;
  ::google::protobuf::uint32 wall4_;
  ::google::protobuf::uint32 wall5_;
  ::google::protobuf::uint32 wall6_;
  ::google::protobuf::int32 offset1_;
  ::google::protobuf::int32 offset2_;
  ::google::protobuf::int32 offset3_;
  ::google::protobuf::int32 offset4_;
  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();

  void InitAsDefaultInstance();
  static Tile* default_instance_;
};
// -------------------------------------------------------------------

class TileStack : public ::google::protobuf::Message {
 public:
  TileStack();
  virtual ~TileStack();

  TileStack(const TileStack& from);

  inline TileStack& operator=(const TileStack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileStack& default_instance();

  void Swap(TileStack* other);

  // implements Message ----------------------------------------------

  TileStack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TileStack& from);
  void MergeFrom(const TileStack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Game.Tile tiles = 1;
  inline int tiles_size() const;
  inline void clear_tiles();
  static const int kTilesFieldNumber = 1;
  inline const ::Game::Tile& tiles(int index) const;
  inline ::Game::Tile* mutable_tiles(int index);
  inline ::Game::Tile* add_tiles();
  inline const ::google::protobuf::RepeatedPtrField< ::Game::Tile >&
      tiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game::Tile >*
      mutable_tiles();

  // @@protoc_insertion_point(class_scope:Game.TileStack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Game::Tile > tiles_;
  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();

  void InitAsDefaultInstance();
  static TileStack* default_instance_;
};
// -------------------------------------------------------------------

class Map : public ::google::protobuf::Message {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();

  void Swap(Map* other);

  // implements Message ----------------------------------------------

  Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required uint32 floors = 3;
  inline bool has_floors() const;
  inline void clear_floors();
  static const int kFloorsFieldNumber = 3;
  inline ::google::protobuf::uint32 floors() const;
  inline void set_floors(::google::protobuf::uint32 value);

  // repeated .Game.TileStack tile_stacks = 4;
  inline int tile_stacks_size() const;
  inline void clear_tile_stacks();
  static const int kTileStacksFieldNumber = 4;
  inline const ::Game::TileStack& tile_stacks(int index) const;
  inline ::Game::TileStack* mutable_tile_stacks(int index);
  inline ::Game::TileStack* add_tile_stacks();
  inline const ::google::protobuf::RepeatedPtrField< ::Game::TileStack >&
      tile_stacks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game::TileStack >*
      mutable_tile_stacks();

  // @@protoc_insertion_point(class_scope:Game.Map)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_floors();
  inline void clear_has_floors();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::RepeatedPtrField< ::Game::TileStack > tile_stacks_;
  ::google::protobuf::uint32 floors_;
  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();

  void InitAsDefaultInstance();
  static Map* default_instance_;
};
// ===================================================================


// ===================================================================

// Tile

// required uint32 floor = 1;
inline bool Tile::has_floor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tile::set_has_floor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tile::clear_has_floor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tile::clear_floor() {
  floor_ = 0u;
  clear_has_floor();
}
inline ::google::protobuf::uint32 Tile::floor() const {
  // @@protoc_insertion_point(field_get:Game.Tile.floor)
  return floor_;
}
inline void Tile::set_floor(::google::protobuf::uint32 value) {
  set_has_floor();
  floor_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.floor)
}

// optional uint32 background = 2;
inline bool Tile::has_background() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tile::set_has_background() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tile::clear_has_background() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tile::clear_background() {
  background_ = 0u;
  clear_has_background();
}
inline ::google::protobuf::uint32 Tile::background() const {
  // @@protoc_insertion_point(field_get:Game.Tile.background)
  return background_;
}
inline void Tile::set_background(::google::protobuf::uint32 value) {
  set_has_background();
  background_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.background)
}

// optional uint32 foreground = 3;
inline bool Tile::has_foreground() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tile::set_has_foreground() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tile::clear_has_foreground() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tile::clear_foreground() {
  foreground_ = 0u;
  clear_has_foreground();
}
inline ::google::protobuf::uint32 Tile::foreground() const {
  // @@protoc_insertion_point(field_get:Game.Tile.foreground)
  return foreground_;
}
inline void Tile::set_foreground(::google::protobuf::uint32 value) {
  set_has_foreground();
  foreground_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.foreground)
}

// optional uint32 wall1 = 4;
inline bool Tile::has_wall1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tile::set_has_wall1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tile::clear_has_wall1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tile::clear_wall1() {
  wall1_ = 0u;
  clear_has_wall1();
}
inline ::google::protobuf::uint32 Tile::wall1() const {
  // @@protoc_insertion_point(field_get:Game.Tile.wall1)
  return wall1_;
}
inline void Tile::set_wall1(::google::protobuf::uint32 value) {
  set_has_wall1();
  wall1_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.wall1)
}

// optional uint32 wall2 = 5;
inline bool Tile::has_wall2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tile::set_has_wall2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tile::clear_has_wall2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tile::clear_wall2() {
  wall2_ = 0u;
  clear_has_wall2();
}
inline ::google::protobuf::uint32 Tile::wall2() const {
  // @@protoc_insertion_point(field_get:Game.Tile.wall2)
  return wall2_;
}
inline void Tile::set_wall2(::google::protobuf::uint32 value) {
  set_has_wall2();
  wall2_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.wall2)
}

// optional uint32 wall3 = 6;
inline bool Tile::has_wall3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tile::set_has_wall3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tile::clear_has_wall3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tile::clear_wall3() {
  wall3_ = 0u;
  clear_has_wall3();
}
inline ::google::protobuf::uint32 Tile::wall3() const {
  // @@protoc_insertion_point(field_get:Game.Tile.wall3)
  return wall3_;
}
inline void Tile::set_wall3(::google::protobuf::uint32 value) {
  set_has_wall3();
  wall3_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.wall3)
}

// optional uint32 wall4 = 7;
inline bool Tile::has_wall4() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tile::set_has_wall4() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tile::clear_has_wall4() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tile::clear_wall4() {
  wall4_ = 0u;
  clear_has_wall4();
}
inline ::google::protobuf::uint32 Tile::wall4() const {
  // @@protoc_insertion_point(field_get:Game.Tile.wall4)
  return wall4_;
}
inline void Tile::set_wall4(::google::protobuf::uint32 value) {
  set_has_wall4();
  wall4_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.wall4)
}

// optional uint32 wall5 = 8;
inline bool Tile::has_wall5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tile::set_has_wall5() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tile::clear_has_wall5() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tile::clear_wall5() {
  wall5_ = 0u;
  clear_has_wall5();
}
inline ::google::protobuf::uint32 Tile::wall5() const {
  // @@protoc_insertion_point(field_get:Game.Tile.wall5)
  return wall5_;
}
inline void Tile::set_wall5(::google::protobuf::uint32 value) {
  set_has_wall5();
  wall5_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.wall5)
}

// optional uint32 wall6 = 9;
inline bool Tile::has_wall6() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tile::set_has_wall6() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tile::clear_has_wall6() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tile::clear_wall6() {
  wall6_ = 0u;
  clear_has_wall6();
}
inline ::google::protobuf::uint32 Tile::wall6() const {
  // @@protoc_insertion_point(field_get:Game.Tile.wall6)
  return wall6_;
}
inline void Tile::set_wall6(::google::protobuf::uint32 value) {
  set_has_wall6();
  wall6_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.wall6)
}

// optional int32 offset1 = 10;
inline bool Tile::has_offset1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tile::set_has_offset1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tile::clear_has_offset1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tile::clear_offset1() {
  offset1_ = 0;
  clear_has_offset1();
}
inline ::google::protobuf::int32 Tile::offset1() const {
  // @@protoc_insertion_point(field_get:Game.Tile.offset1)
  return offset1_;
}
inline void Tile::set_offset1(::google::protobuf::int32 value) {
  set_has_offset1();
  offset1_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.offset1)
}

// optional int32 offset2 = 11;
inline bool Tile::has_offset2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Tile::set_has_offset2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Tile::clear_has_offset2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Tile::clear_offset2() {
  offset2_ = 0;
  clear_has_offset2();
}
inline ::google::protobuf::int32 Tile::offset2() const {
  // @@protoc_insertion_point(field_get:Game.Tile.offset2)
  return offset2_;
}
inline void Tile::set_offset2(::google::protobuf::int32 value) {
  set_has_offset2();
  offset2_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.offset2)
}

// optional int32 offset3 = 12;
inline bool Tile::has_offset3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Tile::set_has_offset3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Tile::clear_has_offset3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Tile::clear_offset3() {
  offset3_ = 0;
  clear_has_offset3();
}
inline ::google::protobuf::int32 Tile::offset3() const {
  // @@protoc_insertion_point(field_get:Game.Tile.offset3)
  return offset3_;
}
inline void Tile::set_offset3(::google::protobuf::int32 value) {
  set_has_offset3();
  offset3_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.offset3)
}

// optional int32 offset4 = 13;
inline bool Tile::has_offset4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Tile::set_has_offset4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Tile::clear_has_offset4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Tile::clear_offset4() {
  offset4_ = 0;
  clear_has_offset4();
}
inline ::google::protobuf::int32 Tile::offset4() const {
  // @@protoc_insertion_point(field_get:Game.Tile.offset4)
  return offset4_;
}
inline void Tile::set_offset4(::google::protobuf::int32 value) {
  set_has_offset4();
  offset4_ = value;
  // @@protoc_insertion_point(field_set:Game.Tile.offset4)
}

// -------------------------------------------------------------------

// TileStack

// repeated .Game.Tile tiles = 1;
inline int TileStack::tiles_size() const {
  return tiles_.size();
}
inline void TileStack::clear_tiles() {
  tiles_.Clear();
}
inline const ::Game::Tile& TileStack::tiles(int index) const {
  // @@protoc_insertion_point(field_get:Game.TileStack.tiles)
  return tiles_.Get(index);
}
inline ::Game::Tile* TileStack::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:Game.TileStack.tiles)
  return tiles_.Mutable(index);
}
inline ::Game::Tile* TileStack::add_tiles() {
  // @@protoc_insertion_point(field_add:Game.TileStack.tiles)
  return tiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game::Tile >&
TileStack::tiles() const {
  // @@protoc_insertion_point(field_list:Game.TileStack.tiles)
  return tiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game::Tile >*
TileStack::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:Game.TileStack.tiles)
  return &tiles_;
}

// -------------------------------------------------------------------

// Map

// required uint32 width = 1;
inline bool Map::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Map::width() const {
  // @@protoc_insertion_point(field_get:Game.Map.width)
  return width_;
}
inline void Map::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Game.Map.width)
}

// required uint32 height = 2;
inline bool Map::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Map::height() const {
  // @@protoc_insertion_point(field_get:Game.Map.height)
  return height_;
}
inline void Map::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Game.Map.height)
}

// required uint32 floors = 3;
inline bool Map::has_floors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map::set_has_floors() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map::clear_has_floors() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map::clear_floors() {
  floors_ = 0u;
  clear_has_floors();
}
inline ::google::protobuf::uint32 Map::floors() const {
  // @@protoc_insertion_point(field_get:Game.Map.floors)
  return floors_;
}
inline void Map::set_floors(::google::protobuf::uint32 value) {
  set_has_floors();
  floors_ = value;
  // @@protoc_insertion_point(field_set:Game.Map.floors)
}

// repeated .Game.TileStack tile_stacks = 4;
inline int Map::tile_stacks_size() const {
  return tile_stacks_.size();
}
inline void Map::clear_tile_stacks() {
  tile_stacks_.Clear();
}
inline const ::Game::TileStack& Map::tile_stacks(int index) const {
  // @@protoc_insertion_point(field_get:Game.Map.tile_stacks)
  return tile_stacks_.Get(index);
}
inline ::Game::TileStack* Map::mutable_tile_stacks(int index) {
  // @@protoc_insertion_point(field_mutable:Game.Map.tile_stacks)
  return tile_stacks_.Mutable(index);
}
inline ::Game::TileStack* Map::add_tile_stacks() {
  // @@protoc_insertion_point(field_add:Game.Map.tile_stacks)
  return tile_stacks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game::TileStack >&
Map::tile_stacks() const {
  // @@protoc_insertion_point(field_list:Game.Map.tile_stacks)
  return tile_stacks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game::TileStack >*
Map::mutable_tile_stacks() {
  // @@protoc_insertion_point(field_mutable_list:Game.Map.tile_stacks)
  return &tile_stacks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_2eproto__INCLUDED
